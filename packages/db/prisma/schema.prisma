// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  PRO
  ADMIN
}

enum KycStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum PricingType {
  FIXED
  HOURLY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED
  DISPUTED
}

model User {
  id           String   @id @default(cuid())
  role         Role
  email        String   @unique
  phone        String?  @unique
  name         String?
  avatarUrl    String?
  kycStatus    KycStatus @default(PENDING_REVIEW)
  ratingAvg    Float     @default(0)
  ratingCount  Int       @default(0)
  addresses    Address[]
  proProfile   ProProfile?
  kycSubmission KycSubmission?
  services     Service[]
  clientBookings Booking[] @relation("Client")
  proBookings  Booking[] @relation("Pro")
  reviews      Review[]
  inventoryItems InventoryItem[]
  auditLogs    AuditLog[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  label     String?
  line1     String
  line2     String?
  city      String
  state     String?
  country   String  @default("Panama")
  postalCode String?
  lat       Float?
  lng       Float?
  isDefault Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings  Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  icon     String?
  active   Boolean   @default(true)
  services Service[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Service {
  id          String      @id @default(cuid())
  categoryId  String
  proId       String
  title       String
  description String
  pricingType PricingType
  price       Int         // cents
  durationMin Int
  active      Boolean     @default(true)
  images      String[]    @default([])
  materials   ServiceMaterial[]
  category    Category    @relation(fields: [categoryId], references: [id])
  pro         User        @relation(fields: [proId], references: [id])
  bookings    Booking[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("services")
}

model ProProfile {
  userId        String @id
  bio           String?
  serviceRadiusKm Int @default(20)
  coverageCities String[] @default([])
  availability   Json     // bloqueos/reglas
  stripeAccountId String?
  isActive      Boolean @default(true)
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("pro_profiles")
}

model KycSubmission {
  id                 String   @id @default(cuid())
  userId             String   @unique
  idType             String
  idNumber           String
  selfieUrl          String
  docFrontUrl        String
  docBackUrl         String?
  criminalRecordUrl  String   // r√©cord policial
  addressProofUrl    String?
  status             KycStatus @default(PENDING_REVIEW)
  reviewedBy         String?
  reviewNotes        String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("kyc_submissions")
}

model Booking {
  id           String        @id @default(cuid())
  clientId     String
  proId        String
  serviceId    String
  addressId    String
  startAt      DateTime
  endAt        DateTime
  status       BookingStatus @default(PENDING)
  notes        String?
  priceCents   Int
  commissionCents Int        @default(0)
  paymentId    String?       // Stripe payment intent
  chatId       String?
  client       User          @relation("Client", fields: [clientId], references: [id])
  pro          User          @relation("Pro", fields: [proId], references: [id])
  service      Service       @relation(fields: [serviceId], references: [id])
  address      Address       @relation(fields: [addressId], references: [id])
  review       Review?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("bookings")
}

model InventoryItem {
  id          String  @id @default(cuid())
  proId       String
  sku         String
  name        String
  description String?
  stock       Int     @default(0)
  minAlert    Int     @default(0)
  costCents   Int     @default(0)
  unit        String  @default("pcs")
  pro         User    @relation(fields: [proId], references: [id], onDelete: Cascade)
  serviceMaterials ServiceMaterial[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("inventory_items")
}

model ServiceMaterial {
  id             String @id @default(cuid())
  serviceId      String
  inventoryItemId String
  qtyPerService  Float
  service        Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  inventoryItem  InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  @@map("service_materials")
}

model Review {
  id        String  @id @default(cuid())
  bookingId String  @unique
  clientId  String
  proId     String
  rating    Int     // 1-5
  comment   String?
  images    String[] @default([])
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  client    User    @relation(fields: [clientId], references: [id])
  pro       User    @relation(fields: [proId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model AuditLog {
  id        String  @id @default(cuid())
  actorId   String?
  action    String
  resource  String?
  resourceId String?
  meta      Json?
  user      User?   @relation(fields: [actorId], references: [id])
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model Dispute {
  id          String   @id @default(cuid())
  bookingId   String   @unique
  clientId    String
  proId       String
  reason      String
  description String
  status      String   @default("OPEN") // OPEN, IN_REVIEW, RESOLVED, CLOSED
  resolution  String?
  resolvedBy  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("disputes")
}

model WhatsAppSession {
  id        String   @id @default(cuid())
  phone     String   @unique
  state     String   @default("idle")
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("whatsapp_sessions")
}

model Commission {
  id         String  @id @default(cuid())
  categoryId String
  percentage Float   // 0.05 = 5%
  active     Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("commissions")
}
